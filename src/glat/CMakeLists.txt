set(TARGET glat)

# Sources
set(header_path "${GLAT_DIR}/include/glat")
set(source_path "${CMAKE_CURRENT_SOURCE_DIR}")

set(header
	${header_path}/DirtyFlagObject.h
	${header_path}/GlyphSetConfig.h

	${header_path}/AbstractAnnotation.h
	${header_path}/FontAnnotation.h
	${header_path}/SVGAnnotation.h
	${header_path}/PNGAnnotation.h

	${header_path}/Styling.h
	${header_path}/Styles.h
	${header_path}/Styles/Outline.h
	${header_path}/Styles/BumpMap.h
	${header_path}/Styles/ExternalColor.h

	${header_path}/TextureManager.h
	${header_path}/RendererFactory.h
	${header_path}/AbstractRenderer.h

	${header_path}/NVPRRenderer.h
	${header_path}/NVPRFontRenderer.h
	${header_path}/NVPRSvgRenderer.h

	${header_path}/PNGImage.h
	${header_path}/AbstractPrimitiveRenderer.h
	${header_path}/DistanceFieldGenerator.h
	${header_path}/DistanceFieldPNGRenderer.h
	${header_path}/DistanceFieldFontRenderer.h

	${header_path}/AbstractState.h
	${header_path}/AbstractExternalState.h
	${header_path}/ExternalBoxState.h
	${header_path}/ExternalLabelState.h
	${header_path}/ViewportState.h
	${header_path}/InternalState.h
	
	${header_path}/AbstractDrawingPrimitive.h
	${header_path}/Quad.h
	${header_path}/TexturedQuad.h
	${header_path}/QuadStrip.h
	${header_path}/Box.h
)

set(sources
	${source_path}/DirtyFlagObject.cpp
	${source_path}/GlyphSetConfig.cpp

	${source_path}/AbstractAnnotation.cpp
	${source_path}/FontAnnotation.cpp
	${source_path}/SVGAnnotation.cpp
	${source_path}/PNGAnnotation.cpp

	${source_path}/Styling.cpp
	${source_path}/Styles/Outline.cpp
	${source_path}/Styles/BumpMap.cpp
	${source_path}/Styles/ExternalColor.cpp

	${source_path}/TextureManager.cpp
	${source_path}/RendererFactory.cpp

	${source_path}/nvpr_init.h
	${source_path}/nvpr_init.c

	${source_path}/NVPRRenderer.cpp
	${source_path}/NVPRFontRenderer.cpp
	${source_path}/NVPRSvgRenderer.cpp

	${source_path}/PNGImage.cpp
	${source_path}/AbstractPrimitiveRenderer.cpp
	${source_path}/DistanceFieldGenerator.cpp
	${source_path}/DistanceFieldPNGRenderer.cpp	
	${source_path}/DistanceFieldFontRenderer.cpp

	${source_path}/AbstractState.cpp
	${source_path}/AbstractExternalState.cpp
	${source_path}/ExternalBoxState.cpp
	${source_path}/ExternalLabelState.cpp
	${source_path}/ViewportState.cpp
	${source_path}/InternalState.cpp
	
	${source_path}/AbstractDrawingPrimitive.cpp
	${source_path}/Quad.cpp
	${source_path}/AbstractDFPrimitive.cpp
	${source_path}/TexturedQuad.cpp
	${source_path}/QuadStrip.cpp
	${source_path}/Box.cpp
	
	${source_path}/ShaderSources.hpp
)

# Group source files
set(glat_header_group "Header Files")
set(glat_source_group "Source Files")
source_group_by_path(${header_path} "\\\\.h$|\\\\.hpp$" 
    ${glat_header_group} ${header})
source_group_by_path(${source_path} "\\\\.cpp$|\\\\.c$|\\\\.h$|\\\\.hpp$" 
    ${glat_source_group} ${sources})

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.in ${CMAKE_CURRENT_BINARY_DIR}/config.h)
include_directories (
	${CMAKE_CURRENT_BINARY_DIR}
	${RAPIDJSON_INCLUDE_DIR}
) 

# Build library
if(OPTION_BUILD_STATIC)
    add_library(${TARGET} ${header} ${sources})
else()
    add_library(${TARGET} SHARED ${header} ${sources})
endif()

target_link_libraries(${TARGET}
	general
		${GLEW_LIBRARY}
		${OPENGL_LIBRARIES}
		${LIBPNG_LIBRARY}

	optimized
		${GLOW_LIBRARIES}
	debug
		${GLOW_LIBRARIES_DEBUG}
)